name: CI

on:
  push:
    branches:
      - master
  pull_request: {}
  release:
    types:
      - created

jobs:
  test:
    name: Test target ${{ matrix.target }} with features ${{ matrix.features }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
          - os: macOS-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
          - os: windows-latest
            target: x86_64-pc-windows-gnu
          - os: windows-latest
            target: i686-pc-windows-gnu
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true

    - name: Install stable toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        target: ${{ matrix.target }}
        components: rustfmt, clippy

    - name: Install `just` command runner
      uses: extractions/setup-just@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup (debian)
      run: |
        echo "Install system tools"
        sudo apt-get update -y
        sudo apt-get install -y curl xz-utils build-essential gcc-multilib valgrind
      if: matrix.os == 'ubuntu-latest'

    - name: Setup (windows)
      run: |
        PATH = "C:\msys64\mingw64\bin;C:\msys64\usr\bin;$PATH"
        pacman -S mingw64/mingw-w64-x86_64-clang mingw32/mingw-w64-i686-clang
        echo "PATH=$PATH" >> $GITHUB_ENV
      shell: bash
      if: matrix.os == 'windows-latest'

    - name: Set CARGO_BUILD_TARGET
      env:
        QJS_TARGET: ${{ matrix.target }}
      run: |
        echo "CARGO_BUILD_TARGET=$QJS_TARGET" >> $GITHUB_ENV
      shell: bash


    - name: Build (default features)
      env:
        FEATURES: ""
      run: |
        cargo clean
        just FEATURES="$FEATURES" build

    - name: Test (default features)
      env:
        FEATURES: ""
      run: |
        just FEATURES="$FEATURES" test

    - name: Build (--no-default-features)
      env:
        FEATURES: "--no-default-features"
      run: |
        cargo clean
        just FEATURES="$FEATURES" build

    - name: Test (--no-default-features)
      env:
        FEATURES: "--no-default-features"
      run: |
        just FEATURES="$FEATURES" test

    - name: Build (--all-features)
      env:
        FEATURES: "--all-features"
      run: |
        cargo clean
        just FEATURES="$FEATURES" build

    - name: Test (--all-features)
      env:
        FEATURES: "--all-features"
      run: |
        just FEATURES="$FEATURES" test

    - name: Lint
      run: just lint
      if: matrix.target == 'x86_64-unknown-linux-gnu'

    - name: Check for leaks (Valgrind)
      run: just valgrind
      if: matrix.target == 'x86_64-unknown-linux-gnu'
